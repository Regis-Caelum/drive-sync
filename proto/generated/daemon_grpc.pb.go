// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: daemon.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WatchListService_GetWatchList_FullMethodName              = "/generated.WatchListService/GetWatchList"
	WatchListService_AddDirectoriesToWatchList_FullMethodName = "/generated.WatchListService/AddDirectoriesToWatchList"
)

// WatchListServiceClient is the client API for WatchListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WatchListServiceClient interface {
	GetWatchList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FileList, error)
	AddDirectoriesToWatchList(ctx context.Context, in *PathList, opts ...grpc.CallOption) (*ResponseList, error)
}

type watchListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWatchListServiceClient(cc grpc.ClientConnInterface) WatchListServiceClient {
	return &watchListServiceClient{cc}
}

func (c *watchListServiceClient) GetWatchList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FileList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileList)
	err := c.cc.Invoke(ctx, WatchListService_GetWatchList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchListServiceClient) AddDirectoriesToWatchList(ctx context.Context, in *PathList, opts ...grpc.CallOption) (*ResponseList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseList)
	err := c.cc.Invoke(ctx, WatchListService_AddDirectoriesToWatchList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatchListServiceServer is the server API for WatchListService service.
// All implementations must embed UnimplementedWatchListServiceServer
// for forward compatibility.
type WatchListServiceServer interface {
	GetWatchList(context.Context, *Empty) (*FileList, error)
	AddDirectoriesToWatchList(context.Context, *PathList) (*ResponseList, error)
	mustEmbedUnimplementedWatchListServiceServer()
}

// UnimplementedWatchListServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWatchListServiceServer struct{}

func (UnimplementedWatchListServiceServer) GetWatchList(context.Context, *Empty) (*FileList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWatchList not implemented")
}
func (UnimplementedWatchListServiceServer) AddDirectoriesToWatchList(context.Context, *PathList) (*ResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDirectoriesToWatchList not implemented")
}
func (UnimplementedWatchListServiceServer) mustEmbedUnimplementedWatchListServiceServer() {}
func (UnimplementedWatchListServiceServer) testEmbeddedByValue()                          {}

// UnsafeWatchListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WatchListServiceServer will
// result in compilation errors.
type UnsafeWatchListServiceServer interface {
	mustEmbedUnimplementedWatchListServiceServer()
}

func RegisterWatchListServiceServer(s grpc.ServiceRegistrar, srv WatchListServiceServer) {
	// If the following call pancis, it indicates UnimplementedWatchListServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WatchListService_ServiceDesc, srv)
}

func _WatchListService_GetWatchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchListServiceServer).GetWatchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatchListService_GetWatchList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchListServiceServer).GetWatchList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchListService_AddDirectoriesToWatchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchListServiceServer).AddDirectoriesToWatchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatchListService_AddDirectoriesToWatchList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchListServiceServer).AddDirectoriesToWatchList(ctx, req.(*PathList))
	}
	return interceptor(ctx, in, info, handler)
}

// WatchListService_ServiceDesc is the grpc.ServiceDesc for WatchListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WatchListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "generated.WatchListService",
	HandlerType: (*WatchListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWatchList",
			Handler:    _WatchListService_GetWatchList_Handler,
		},
		{
			MethodName: "AddDirectoriesToWatchList",
			Handler:    _WatchListService_AddDirectoriesToWatchList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "daemon.proto",
}

const (
	AuthenticationService_SaveToken_FullMethodName = "/generated.AuthenticationService/SaveToken"
	AuthenticationService_GetToken_FullMethodName  = "/generated.AuthenticationService/GetToken"
)

// AuthenticationServiceClient is the client API for AuthenticationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationServiceClient interface {
	SaveToken(ctx context.Context, in *OAuth2Token, opts ...grpc.CallOption) (*Empty, error)
	GetToken(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OAuth2Token, error)
}

type authenticationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationServiceClient(cc grpc.ClientConnInterface) AuthenticationServiceClient {
	return &authenticationServiceClient{cc}
}

func (c *authenticationServiceClient) SaveToken(ctx context.Context, in *OAuth2Token, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AuthenticationService_SaveToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) GetToken(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OAuth2Token, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OAuth2Token)
	err := c.cc.Invoke(ctx, AuthenticationService_GetToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationServiceServer is the server API for AuthenticationService service.
// All implementations must embed UnimplementedAuthenticationServiceServer
// for forward compatibility.
type AuthenticationServiceServer interface {
	SaveToken(context.Context, *OAuth2Token) (*Empty, error)
	GetToken(context.Context, *Empty) (*OAuth2Token, error)
	mustEmbedUnimplementedAuthenticationServiceServer()
}

// UnimplementedAuthenticationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthenticationServiceServer struct{}

func (UnimplementedAuthenticationServiceServer) SaveToken(context.Context, *OAuth2Token) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveToken not implemented")
}
func (UnimplementedAuthenticationServiceServer) GetToken(context.Context, *Empty) (*OAuth2Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedAuthenticationServiceServer) mustEmbedUnimplementedAuthenticationServiceServer() {}
func (UnimplementedAuthenticationServiceServer) testEmbeddedByValue()                               {}

// UnsafeAuthenticationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationServiceServer will
// result in compilation errors.
type UnsafeAuthenticationServiceServer interface {
	mustEmbedUnimplementedAuthenticationServiceServer()
}

func RegisterAuthenticationServiceServer(s grpc.ServiceRegistrar, srv AuthenticationServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthenticationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthenticationService_ServiceDesc, srv)
}

func _AuthenticationService_SaveToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuth2Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).SaveToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticationService_SaveToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).SaveToken(ctx, req.(*OAuth2Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticationService_GetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).GetToken(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticationService_ServiceDesc is the grpc.ServiceDesc for AuthenticationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "generated.AuthenticationService",
	HandlerType: (*AuthenticationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveToken",
			Handler:    _AuthenticationService_SaveToken_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _AuthenticationService_GetToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "daemon.proto",
}
